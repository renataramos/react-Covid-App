{"ast":null,"code":"var _jsxFileName = \"/Users/utilizador/Documents/academia/LocalRepo/covid-app/react-Covid-App/src/components/CountryChart.js\";\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nexport default function CountryChart(props) {\n  const {\n    countryID\n  } = useParams();\n  const [data, setData] = useState({});\n  useEffect(() => {\n    async function fetchData() {\n      const requestOption = {\n        method: \"GET\",\n        redirect: \"follow\"\n      };\n\n      try {\n        const response = await fetch(`https://disease.sh/v2/historical/${countryID}`, requestOption);\n        return response.ok ? response.json() : null;\n      } catch (err) {\n        console.log(err);\n        return null;\n      }\n    }\n\n    async function prepareData() {\n      let apiValues = await fetchData();\n      let rawTimelineData = apiValues[\"timeline\"];\n      let rawCasesData = rawTimelineData[\"cases\"];\n      let rawRecoveredData = rawTimelineData[\"recovered\"];\n      let rawDeathData = rawTimelineData[\"deaths\"];\n      const chartData = [];\n\n      for (let key in rawCasesData) {\n        if (rawCasesData.hasOwnProperty(key)) {\n          const newRow = {\n            name: key,\n            cases: parseInt(rawCasesData[key]),\n            recovered: parseInt(rawRecoveredData[key])\n          };\n          chartData.push(newRow);\n        }\n      }\n\n      console.log(chartData);\n      setData(chartData);\n    }\n\n    prepareData();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    width: 730,\n    height: 250,\n    data: data,\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"cases\",\n    stroke: \"#8884d8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"recovered\",\n    stroke: \"#82ca9d\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"deaths\",\n    stroke: \"#82ca9d\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/utilizador/Documents/academia/LocalRepo/covid-app/react-Covid-App/src/components/CountryChart.js"],"names":["React","useState","useEffect","useParams","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","CountryChart","props","countryID","data","setData","fetchData","requestOption","method","redirect","response","fetch","ok","json","err","console","log","prepareData","apiValues","rawTimelineData","rawCasesData","rawRecoveredData","rawDeathData","chartData","key","hasOwnProperty","newRow","name","cases","parseInt","recovered","push","top","right","left","bottom"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {useState, useEffect} from 'react';\nimport {useParams} from 'react-router-dom'\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend\n} from 'recharts'\n\nexport default function CountryChart(props){\n\n    const {countryID} = useParams();\n    const [data, setData] = useState({});\n\n    useEffect(()=>{\n\n        async function fetchData() {\n            const requestOption = {\n                method: \"GET\",\n                redirect: \"follow\"\n            }\n    \n            try {\n                const response = await fetch(`https://disease.sh/v2/historical/${countryID}`, requestOption)\n    \n                return response.ok ? response.json() : null\n            } catch (err){\n                console.log(err);\n                return null;\n            }\n        }\n\n        async function prepareData(){\n            let apiValues = await fetchData();\n            let rawTimelineData = apiValues[\"timeline\"]\n            let rawCasesData = rawTimelineData[\"cases\"]\n            let rawRecoveredData = rawTimelineData[\"recovered\"]\n            let rawDeathData = rawTimelineData[\"deaths\"]\n\n            const chartData = [];\n\n            for (let key in rawCasesData){\n                if (rawCasesData.hasOwnProperty(key)){\n                    const newRow = {\n                        name: key,\n                        cases: parseInt(rawCasesData[key]),\n                        recovered: parseInt(rawRecoveredData[key])\n                    }\n                    chartData.push(newRow)\n                }\n            }\n\n\n            console.log(chartData)\n            setData(chartData)\n\n\n        }\n\n        prepareData();\n\n\n\n\n    }, [])\n\n    return (\n        <div>\n        <LineChart width={730} height={250} data={data}\n        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Line type=\"monotone\" dataKey=\"cases\" stroke=\"#8884d8\" />\n        <Line type=\"monotone\" dataKey=\"recovered\" stroke=\"#82ca9d\" />\n        <Line type=\"monotone\" dataKey=\"deaths\" stroke=\"#82ca9d\" />\n        </LineChart>\n        \n        \n        \n        \n        </div>\n\n\n    )\n\n}"]},"metadata":{},"sourceType":"module"}