{"ast":null,"code":"var _jsxFileName = \"/Users/utilizador/Documents/academia/LocalRepo/covid-app/react-Covid-App/src/components/country-global/GlobalChart.js\";\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { fetchGlobalChartData } from '../ApiService.js';\nexport default function GlobalChart(props) {\n  const [data, setData] = useState({});\n  useEffect(() => {\n    let isMounted = true;\n\n    async function prepareData() {\n      let apiValues = await fetchGlobalChartData();\n      let rawCasesData = apiValues[\"cases\"];\n      let rawDeathsData = apiValues[\"deaths\"];\n      let rawRecoveredData = apiValues[\"recovered\"];\n      const chartCasesData = [];\n      const chartDeathsData = [];\n      const chartRecoveredData = [];\n\n      for (let key in rawCasesData) {\n        if (rawCasesData.hasOwnProperty(key)) {\n          const newRow = {\n            name: key,\n            value: parseInt(rawCasesData[key])\n          };\n          chartCasesData.push(newRow);\n        }\n      }\n\n      for (let key in rawDeathsData) {\n        if (rawDeathsData.hasOwnProperty(key)) {\n          const newRow = {\n            name: key,\n            value: parseInt(rawDeathsData[key])\n          };\n          chartDeathsData.push(newRow);\n        }\n      }\n\n      for (let key in rawRecoveredData) {\n        if (rawRecoveredData.hasOwnProperty(key)) {\n          const newRow = {\n            name: key,\n            value: parseInt(rawRecoveredData[key])\n          };\n          chartRecoveredData.push(newRow);\n        }\n      }\n\n      setData({\n        cases: chartCasesData,\n        deaths: chartDeathsData,\n        recovered: chartRecoveredData\n      });\n    }\n\n    if (isMounted) {\n      prepareData();\n    }\n\n    return () => isMounted = false;\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"homeChart\",\n    className: \"chart-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"chartTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 34\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 38\n    }\n  }, \"last 30 days evolution worldwide\"))), /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"95%\",\n    height: 350,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(AreaChart, {\n    width: 970,\n    height: 350,\n    data: data[props.activeView],\n    margin: {\n      top: 0,\n      right: 10,\n      left: 30,\n      bottom: 70\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"defs\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"colorUv\",\n    x1: \"0\",\n    y1: \"0\",\n    x2: \"0\",\n    y2: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"5%\",\n    stopColor: conditionalStyling(props.activeView),\n    stopOpacity: 0.8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"95%\",\n    stopColor: conditionalStyling(props.activeView),\n    stopOpacity: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Area, {\n    type: \"monotone\",\n    dataKey: \"value\",\n    stroke: conditionalStyling(props.activeView),\n    fillOpacity: 1,\n    fill: \"url(#colorUv)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }))));\n}\n\nfunction conditionalStyling(activeView) {\n  if (activeView === 'cases') {\n    return \"#FFA500\";\n  }\n\n  if (activeView === 'deaths') {\n    return \"#FF0000\";\n  }\n\n  return \"#008000\";\n}","map":{"version":3,"sources":["/Users/utilizador/Documents/academia/LocalRepo/covid-app/react-Covid-App/src/components/country-global/GlobalChart.js"],"names":["React","useState","useEffect","AreaChart","Area","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","fetchGlobalChartData","GlobalChart","props","data","setData","isMounted","prepareData","apiValues","rawCasesData","rawDeathsData","rawRecoveredData","chartCasesData","chartDeathsData","chartRecoveredData","key","hasOwnProperty","newRow","name","value","parseInt","push","cases","deaths","recovered","activeView","top","right","left","bottom","conditionalStyling"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {useState, useEffect} from 'react';\nimport {\n    AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer\n} from 'recharts';\nimport {fetchGlobalChartData} from '../ApiService.js'\n\n\nexport default function GlobalChart(props){\n    \n    const [data, setData] = useState({});\n    \n    useEffect(()=>{\n        let isMounted = true;\n\n        async function prepareData(){\n\n            let apiValues = await fetchGlobalChartData();\n            let rawCasesData = apiValues[\"cases\"];\n            let rawDeathsData = apiValues[\"deaths\"];\n            let rawRecoveredData = apiValues[\"recovered\"];\n            \n            const chartCasesData = []\n            const chartDeathsData = []\n            const chartRecoveredData = []\n\n\n            for (let key in rawCasesData){\n                \n                if(rawCasesData.hasOwnProperty(key)){\n                    const newRow = {\n                        name: key,\n                        value: parseInt(rawCasesData[key])\n                    }\n                    chartCasesData.push(newRow)\n                    }\n                }\n            \n\n            for (let key in rawDeathsData){\n                \n                if(rawDeathsData.hasOwnProperty(key)){\n                    const newRow = {\n                        name: key,\n                        value: parseInt(rawDeathsData[key])\n                    }\n                    chartDeathsData.push(newRow)\n                }\n            }\n           \n            for (let key in rawRecoveredData){\n                \n                if(rawRecoveredData.hasOwnProperty(key)){\n                    const newRow = {\n                        name: key,\n                        value: parseInt(rawRecoveredData[key])\n                    }\n                    chartRecoveredData.push(newRow)\n                }\n            }\n            \n            setData({\n                cases: chartCasesData,\n                deaths: chartDeathsData,\n                recovered: chartRecoveredData\n            })\n        }\n\n        if(isMounted){\n            prepareData();\n        }\n        return () => isMounted = false\n\n    }, [])\n\n    return (\n        <div id=\"homeChart\" className=\"chart-wrapper\">\n            <div id=\"chartTitle\"><h4><strong>last 30 days evolution worldwide</strong></h4></div>\n            <ResponsiveContainer width=\"95%\" height={350}>\n            \n                <AreaChart width={970} height={350} data={data[props.activeView]}\n                margin={{ top: 0, right: 10, left: 30, bottom: 70 }}>\n                <defs>\n                    <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor={conditionalStyling(props.activeView)} stopOpacity={0.8}/>\n                        <stop offset=\"95%\" stopColor={conditionalStyling(props.activeView)} stopOpacity={0}/>\n                    </linearGradient>\n                \n                </defs>\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <Tooltip />\n                <Area type=\"monotone\" dataKey=\"value\" stroke={conditionalStyling(props.activeView)} fillOpacity={1} fill=\"url(#colorUv)\" />\n                </AreaChart>\n                </ResponsiveContainer>\n        </div>\n    )\n}\n\nfunction conditionalStyling(activeView){\n    if (activeView==='cases'){\n        return \"#FFA500\"\n    }\n    if (activeView==='deaths'){\n        return \"#FF0000\"\n    }\n    return \"#008000\"\n}\n\n"]},"metadata":{},"sourceType":"module"}