{"ast":null,"code":"var _jsxFileName = \"/Users/utilizador/Documents/academia/LocalRepo/covid-app/react-Covid-App/src/components/country-details/CountryChart.js\";\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { fetchCountryChartData } from '../ApiService.js';\nimport { browserHistory } from 'react-router';\nexport default function CountryChart(props) {\n  const {\n    countryID\n  } = useParams();\n  const [data, setData] = useState({});\n  useEffect(() => {\n    let isMounted = true;\n\n    async function prepareData() {\n      let apiValues = await fetchCountryChartData(countryID);\n      let rawTimelineData = apiValues[\"timeline\"];\n\n      if (rawTimelineData !== null) {\n        let rawCasesData = rawTimelineData[\"cases\"];\n        let rawRecoveredData = rawTimelineData[\"recovered\"];\n        let rawDeathData = rawTimelineData[\"deaths\"];\n        const chartData = [];\n\n        for (let key in rawCasesData) {\n          if (rawCasesData.hasOwnProperty(key)) {\n            const newRow = {\n              name: key,\n              cases: parseInt(rawCasesData[key]),\n              recovered: parseInt(rawRecoveredData[key]),\n              deaths: parseInt(rawDeathData[key])\n            };\n            chartData.push(newRow);\n          }\n        }\n\n        if (isMounted) {\n          setData(chartData);\n        }\n      }\n\n      re;\n    }\n\n    prepareData();\n    return () => isMounted = false;\n  }, [countryID]);\n  return /*#__PURE__*/React.createElement(LineChart, {\n    width: 1100,\n    height: 550,\n    data: data,\n    margin: {\n      top: 55,\n      right: 30,\n      left: 20,\n      bottom: 75\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"cases\",\n    stroke: \"#FFA500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"recovered\",\n    stroke: \"#008000\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"deaths\",\n    stroke: \"#FF0000\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/utilizador/Documents/academia/LocalRepo/covid-app/react-Covid-App/src/components/country-details/CountryChart.js"],"names":["React","useState","useEffect","useParams","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","fetchCountryChartData","browserHistory","CountryChart","props","countryID","data","setData","isMounted","prepareData","apiValues","rawTimelineData","rawCasesData","rawRecoveredData","rawDeathData","chartData","key","hasOwnProperty","newRow","name","cases","parseInt","recovered","deaths","push","re","top","right","left","bottom"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {useState, useEffect} from 'react';\nimport {useParams} from 'react-router-dom';\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend\n} from 'recharts';\nimport {fetchCountryChartData} from '../ApiService.js';\nimport {browserHistory} from 'react-router'\n\n\nexport default function CountryChart(props){\n\n    const {countryID} = useParams();\n    const [data, setData] = useState({});\n\n    useEffect(()=>{\n        let isMounted=true;\n\n        async function prepareData(){\n\n            \n            let apiValues = await fetchCountryChartData(countryID);\n\n            let rawTimelineData = apiValues[\"timeline\"]\n            if (rawTimelineData !== null){\n                \n                let rawCasesData = rawTimelineData[\"cases\"]\n                let rawRecoveredData = rawTimelineData[\"recovered\"]\n                let rawDeathData = rawTimelineData[\"deaths\"]\n    \n                const chartData = [];\n    \n                for (let key in rawCasesData){\n                    if (rawCasesData.hasOwnProperty(key)){\n                        const newRow = {\n                            name: key,\n                            cases: parseInt(rawCasesData[key]),\n                            recovered: parseInt(rawRecoveredData[key]),\n                            deaths: parseInt(rawDeathData[key])\n                        }\n                        chartData.push(newRow)\n                    }\n                }\n                if (isMounted){\n                    setData(chartData)\n                }\n            }\n            re\n        }\n        \n\n            prepareData();\n       \n        \n        return () => isMounted = false\n\n    }, [countryID])\n\n    return (\n      \n      <LineChart width={1100} height={550} data={data}\n      margin={{ top: 55, right: 30, left: 20, bottom: 75 }}>\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis dataKey=\"name\" />\n      <YAxis />\n      <Line type=\"monotone\" dataKey=\"cases\" stroke=\"#FFA500\" />\n      <Line type=\"monotone\" dataKey=\"recovered\" stroke=\"#008000\" />\n      <Line type=\"monotone\" dataKey=\"deaths\" stroke=\"#FF0000\" />\n      \n      <Legend />\n      <Tooltip />\n      </LineChart>\n      \n    )\n}"]},"metadata":{},"sourceType":"module"}