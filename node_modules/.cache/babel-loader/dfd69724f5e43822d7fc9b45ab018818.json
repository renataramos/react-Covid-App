{"ast":null,"code":"var _jsxFileName = \"/Users/utilizador/Documents/academia/LocalRepo/covid-app/react-Covid-App/src/components/country-global/GlobalChart.js\";\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\nexport default function GlobalChart(props) {\n  const [casesData, setCasesData] = useState({});\n  const [deathsData, setDeathsData] = useState({});\n  const [recoveredData, setRecoveredData] = useState({});\n  const [data, setData] = useState({});\n  useEffect(() => {\n    let isMounted = true;\n\n    async function fetchData() {\n      const requestOption = {\n        method: \"GET\",\n        redirect: \"follow\",\n        mode: 'cors'\n      };\n\n      try {\n        const response = await fetch(`https://disease.sh/v2/historical/all`, requestOption);\n        return response.ok ? response.json() : null;\n      } catch (err) {\n        console.log(err);\n        return null;\n      }\n    }\n\n    async function prepareData() {\n      let apiValues = await fetchData();\n      let rawCasesData = apiValues[\"cases\"];\n      let rawDeathsData = apiValues[\"deaths\"];\n      let rawRecoveredData = apiValues[\"recovered\"];\n      const chartCasesData = [];\n      const chartDeathsData = [];\n      const chartRecoveredData = [];\n\n      for (let key in rawCasesData) {\n        if (rawCasesData.hasOwnProperty(key)) {\n          const newRow = {\n            name: key,\n            value: parseInt(rawCasesData[key])\n          };\n          chartCasesData.push(newRow);\n        }\n      }\n\n      setCasesData(chartCasesData);\n\n      for (let key in rawDeathsData) {\n        if (rawDeathsData.hasOwnProperty(key)) {\n          const newRow = {\n            name: key,\n            value: parseInt(rawDeathsData[key])\n          };\n          chartDeathsData.push(newRow);\n        }\n      }\n\n      setDeathsData(chartDeathsData);\n\n      for (let key in rawRecoveredData) {\n        if (rawRecoveredData.hasOwnProperty(key)) {\n          const newRow = {\n            name: key,\n            value: parseInt(rawRecoveredData[key])\n          };\n          chartRecoveredData.push(newRow);\n        }\n      }\n\n      setRecoveredData(chartRecoveredData);\n      setData({\n        cases: ch\n      });\n    }\n\n    if (isMounted) {\n      prepareData();\n    }\n\n    return () => isMounted = false;\n  }, []);\n\n  if (props.activeView === \"cases\") {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"homeChart\",\n      className: \"chart-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"chartTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 34\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 38\n      }\n    }, \"last 30 days evolution worldwide\"))), /*#__PURE__*/React.createElement(AreaChart, {\n      width: 970,\n      height: 450,\n      data: casesData,\n      margin: {\n        top: 0,\n        right: 10,\n        left: 30,\n        bottom: 70\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"defs\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"linearGradient\", {\n      id: \"colorUv\",\n      x1: \"0\",\n      y1: \"0\",\n      x2: \"0\",\n      y2: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"stop\", {\n      offset: \"5%\",\n      stopColor: \"#FFA500\",\n      stopOpacity: 0.8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"stop\", {\n      offset: \"95%\",\n      stopColor: \"#FFA500\",\n      stopOpacity: 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(CartesianGrid, {\n      strokeDasharray: \"3 3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Area, {\n      type: \"monotone\",\n      dataKey: \"value\",\n      stroke: \"#FFA500\",\n      fillOpacity: 1,\n      fill: \"url(#colorUv)\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    })));\n  }\n\n  if (props.activeView === \"recovered\") {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"homeChart\",\n      className: \"chart-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"chartTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 34\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 38\n      }\n    }, \"last 30 days evolution worldwide\"))), /*#__PURE__*/React.createElement(AreaChart, {\n      width: 970,\n      height: 450,\n      data: recoveredData,\n      margin: {\n        top: 0,\n        right: 10,\n        left: 30,\n        bottom: 70\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"defs\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"linearGradient\", {\n      id: \"colorUv\",\n      x1: \"0\",\n      y1: \"0\",\n      x2: \"0\",\n      y2: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"stop\", {\n      offset: \"5%\",\n      stopColor: \"#008000\",\n      stopOpacity: 0.8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"stop\", {\n      offset: \"95%\",\n      stopColor: \"#008000\",\n      stopOpacity: 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(CartesianGrid, {\n      strokeDasharray: \"3 3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Area, {\n      type: \"monotone\",\n      dataKey: \"value\",\n      stroke: \"#008000\",\n      fillOpacity: 1,\n      fill: \"url(#colorUv)\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }\n    })));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"homeChart\",\n    className: \"chart-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"chartTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 30\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 34\n    }\n  }, \"last 30 days evolution worldwide\"))), /*#__PURE__*/React.createElement(AreaChart, {\n    width: 970,\n    height: 450,\n    data: deathsData,\n    margin: {\n      top: 0,\n      right: 10,\n      left: 30,\n      bottom: 70\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"defs\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"colorUv\",\n    x1: \"0\",\n    y1: \"0\",\n    x2: \"0\",\n    y2: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"5%\",\n    stopColor: \"#FF0000\",\n    stopOpacity: 0.8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"95%\",\n    stopColor: \"#FF0000\",\n    stopOpacity: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Area, {\n    type: \"monotone\",\n    dataKey: \"value\",\n    stroke: \"#FF0000\",\n    fillOpacity: 1,\n    fill: \"url(#colorUv)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/utilizador/Documents/academia/LocalRepo/covid-app/react-Covid-App/src/components/country-global/GlobalChart.js"],"names":["React","useState","useEffect","AreaChart","Area","XAxis","YAxis","CartesianGrid","Tooltip","GlobalChart","props","casesData","setCasesData","deathsData","setDeathsData","recoveredData","setRecoveredData","data","setData","isMounted","fetchData","requestOption","method","redirect","mode","response","fetch","ok","json","err","console","log","prepareData","apiValues","rawCasesData","rawDeathsData","rawRecoveredData","chartCasesData","chartDeathsData","chartRecoveredData","key","hasOwnProperty","newRow","name","value","parseInt","push","cases","ch","activeView","top","right","left","bottom"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {useState, useEffect} from 'react';\nimport {\n    AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip\n} from 'recharts'\n\n\n\n\nexport default function GlobalChart(props){\n    \n    const [casesData, setCasesData] = useState({});\n    const [deathsData, setDeathsData] = useState({});\n    const [recoveredData, setRecoveredData] = useState({});\n    const [data, setData] = useState({});\n    \n\n    useEffect(()=>{\n        let isMounted = true;\n\n        async function fetchData() {\n            const requestOption = {\n                method: \"GET\",\n                redirect: \"follow\",\n                mode: 'cors'\n            }\n    \n            try {\n                const response = await fetch(`https://disease.sh/v2/historical/all`, requestOption)\n    \n                return response.ok ? response.json() : null\n            } catch (err){\n                console.log(err);\n                return null;\n            }\n        }\n    \n        async function prepareData(){\n            let apiValues = await fetchData();\n            let rawCasesData = apiValues[\"cases\"];\n            let rawDeathsData = apiValues[\"deaths\"];\n            let rawRecoveredData = apiValues[\"recovered\"];\n            \n            const chartCasesData = []\n            const chartDeathsData = []\n            const chartRecoveredData = []\n\n\n            for (let key in rawCasesData){\n                \n                if(rawCasesData.hasOwnProperty(key)){\n                    const newRow = {\n                        name: key,\n                        value: parseInt(rawCasesData[key])\n                    }\n                    chartCasesData.push(newRow)\n                    }\n                }\n            setCasesData(chartCasesData)\n\n            for (let key in rawDeathsData){\n                \n                if(rawDeathsData.hasOwnProperty(key)){\n                    const newRow = {\n                        name: key,\n                        value: parseInt(rawDeathsData[key])\n                    }\n                    chartDeathsData.push(newRow)\n                    }\n                }\n            setDeathsData(chartDeathsData)\n\n            for (let key in rawRecoveredData){\n                \n                if(rawRecoveredData.hasOwnProperty(key)){\n                    const newRow = {\n                        name: key,\n                        value: parseInt(rawRecoveredData[key])\n                    }\n                    chartRecoveredData.push(newRow)\n                    }\n                }\n            setRecoveredData(chartRecoveredData)\n\n            setData({\n                cases: ch\n            })\n        }\n        if(isMounted){\n            prepareData();\n        }\n        return () => isMounted = false\n\n    }, [])\n    \n\n    if(props.activeView === \"cases\"){\n        return (\n            <div id=\"homeChart\" className=\"chart-wrapper\">\n            <div id=\"chartTitle\"><h4><strong>last 30 days evolution worldwide</strong></h4></div>\n                <AreaChart width={970} height={450} data={casesData}\n                margin={{ top: 0, right: 10, left: 30, bottom: 70 }}>\n                <defs>\n                    <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#FFA500\" stopOpacity={0.8}/>\n                        <stop offset=\"95%\" stopColor=\"#FFA500\" stopOpacity={0}/>\n                    </linearGradient>\n                \n                </defs>\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <Tooltip />\n                <Area type=\"monotone\" dataKey=\"value\" stroke=\"#FFA500\" fillOpacity={1} fill=\"url(#colorUv)\" />\n                </AreaChart>\n            </div>\n        )\n\n    }\n\n    if(props.activeView ===\"recovered\"){\n        return (\n            <div id=\"homeChart\" className=\"chart-wrapper\">\n            <div id=\"chartTitle\"><h4><strong>last 30 days evolution worldwide</strong></h4></div>\n                <AreaChart width={970} height={450} data={recoveredData}\n                margin={{ top: 0, right: 10, left: 30, bottom: 70 }}>\n                <defs>\n                    <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#008000\" stopOpacity={0.8}/>\n                        <stop offset=\"95%\" stopColor=\"#008000\" stopOpacity={0}/>\n                    </linearGradient>\n                \n                </defs>\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <Tooltip />\n                <Area type=\"monotone\" dataKey=\"value\" stroke=\"#008000\" fillOpacity={1} fill=\"url(#colorUv)\" />\n                </AreaChart>\n            </div>\n        )\n\n    }\n    \n    return (\n        <div id=\"homeChart\" className=\"chart-wrapper\">\n        <div id=\"chartTitle\"><h4><strong>last 30 days evolution worldwide</strong></h4></div>\n            <AreaChart width={970} height={450} data={deathsData}\n            margin={{ top: 0, right: 10, left: 30, bottom: 70 }}>\n            <defs>\n                <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor=\"#FF0000\" stopOpacity={0.8}/>\n                    <stop offset=\"95%\" stopColor=\"#FF0000\" stopOpacity={0}/>\n                </linearGradient>\n            \n            </defs>\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <Tooltip />\n            <Area type=\"monotone\" dataKey=\"value\" stroke=\"#FF0000\" fillOpacity={1} fill=\"url(#colorUv)\" />\n            </AreaChart>\n        </div>\n    )\n        \n}\n\n"]},"metadata":{},"sourceType":"module"}