{"ast":null,"code":"import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\nexport default function GlobalChart(props) {\n  const [casesData, setCasesData] = useState({});\n  const [deathsData, setDeathsData] = useState({});\n  const [recoveredData, setRecoveredData] = useState({});\n  const [data, setData] = useState({});\n  useEffect(() => {\n    let isMounted = true;\n\n    async function fetchData() {\n      const requestOption = {\n        method: \"GET\",\n        redirect: \"follow\",\n        mode: 'cors'\n      };\n\n      try {\n        const response = await fetch(`https://disease.sh/v2/historical/all`, requestOption);\n        return response.ok ? response.json() : null;\n      } catch (err) {\n        console.log(err);\n        return null;\n      }\n    }\n\n    async function prepareData() {\n      let apiValues = await fetchData();\n      let rawCasesData = apiValues[\"cases\"];\n      let rawDeathsData = apiValues[\"deaths\"];\n      let rawRecoveredData = apiValues[\"recovered\"];\n      const chartCasesData = [];\n      const chartDeathsData = [];\n      const chartRecoveredData = [];\n\n      for (let key in rawCasesData) {\n        if (rawCasesData.hasOwnProperty(key)) {\n          const newRow = {\n            name: key,\n            value: parseInt(rawCasesData[key])\n          };\n          chartCasesData.push(newRow);\n        }\n      }\n\n      setCasesData(chartCasesData);\n\n      for (let key in rawDeathsData) {\n        if (rawDeathsData.hasOwnProperty(key)) {\n          const newRow = {\n            name: key,\n            value: parseInt(rawDeathsData[key])\n          };\n          chartDeathsData.push(newRow);\n        }\n      }\n\n      setDeathsData(chartDeathsData);\n\n      for (let key in rawRecoveredData) {\n        if (rawRecoveredData.hasOwnProperty(key)) {\n          const newRow = {\n            name: key,\n            value: parseInt(rawRecoveredData[key])\n          };\n          chartRecoveredData.push(newRow);\n        }\n      }\n\n      setRecoveredData(chartRecoveredData);\n      setData({\n        cases: chartCasesData,\n        deaths: chartDeathsData,\n        recovered: chartRecoveredData\n      });\n    }\n\n    if (isMounted) {\n      prepareData();\n    }\n\n    return () => isMounted = false;\n  }, []);\n  retr;\n  /*if(props.activeView === \"cases\"){\n      return (\n          <div id=\"homeChart\" className=\"chart-wrapper\">\n          <div id=\"chartTitle\"><h4><strong>last 30 days evolution worldwide</strong></h4></div>\n              <AreaChart width={970} height={450} data={casesData}\n              margin={{ top: 0, right: 10, left: 30, bottom: 70 }}>\n              <defs>\n                  <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"5%\" stopColor=\"#FFA500\" stopOpacity={0.8}/>\n                      <stop offset=\"95%\" stopColor=\"#FFA500\" stopOpacity={0}/>\n                  </linearGradient>\n              \n              </defs>\n              <XAxis dataKey=\"name\" />\n              <YAxis />\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <Tooltip />\n              <Area type=\"monotone\" dataKey=\"value\" stroke=\"#FFA500\" fillOpacity={1} fill=\"url(#colorUv)\" />\n              </AreaChart>\n          </div>\n      )\n   }\n   if(props.activeView ===\"recovered\"){\n      return (\n          <div id=\"homeChart\" className=\"chart-wrapper\">\n          <div id=\"chartTitle\"><h4><strong>last 30 days evolution worldwide</strong></h4></div>\n              <AreaChart width={970} height={450} data={recoveredData}\n              margin={{ top: 0, right: 10, left: 30, bottom: 70 }}>\n              <defs>\n                  <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"5%\" stopColor=\"#008000\" stopOpacity={0.8}/>\n                      <stop offset=\"95%\" stopColor=\"#008000\" stopOpacity={0}/>\n                  </linearGradient>\n              \n              </defs>\n              <XAxis dataKey=\"name\" />\n              <YAxis />\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <Tooltip />\n              <Area type=\"monotone\" dataKey=\"value\" stroke=\"#008000\" fillOpacity={1} fill=\"url(#colorUv)\" />\n              </AreaChart>\n          </div>\n      )\n   }\n  \n  return (\n      <div id=\"homeChart\" className=\"chart-wrapper\">\n      <div id=\"chartTitle\"><h4><strong>last 30 days evolution worldwide</strong></h4></div>\n          <AreaChart width={970} height={450} data={deathsData}\n          margin={{ top: 0, right: 10, left: 30, bottom: 70 }}>\n          <defs>\n              <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"5%\" stopColor=\"#FF0000\" stopOpacity={0.8}/>\n                  <stop offset=\"95%\" stopColor=\"#FF0000\" stopOpacity={0}/>\n              </linearGradient>\n          \n          </defs>\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Tooltip />\n          <Area type=\"monotone\" dataKey=\"value\" stroke=\"#FF0000\" fillOpacity={1} fill=\"url(#colorUv)\" />\n          </AreaChart>\n      </div>\n  )*/\n}","map":{"version":3,"sources":["/Users/utilizador/Documents/academia/LocalRepo/covid-app/react-Covid-App/src/components/country-global/GlobalChart.js"],"names":["React","useState","useEffect","AreaChart","Area","XAxis","YAxis","CartesianGrid","Tooltip","GlobalChart","props","casesData","setCasesData","deathsData","setDeathsData","recoveredData","setRecoveredData","data","setData","isMounted","fetchData","requestOption","method","redirect","mode","response","fetch","ok","json","err","console","log","prepareData","apiValues","rawCasesData","rawDeathsData","rawRecoveredData","chartCasesData","chartDeathsData","chartRecoveredData","key","hasOwnProperty","newRow","name","value","parseInt","push","cases","deaths","recovered","retr"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {useState, useEffect} from 'react';\nimport {\n    AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip\n} from 'recharts'\n\n\n\n\nexport default function GlobalChart(props){\n    \n    const [casesData, setCasesData] = useState({});\n    const [deathsData, setDeathsData] = useState({});\n    const [recoveredData, setRecoveredData] = useState({});\n    const [data, setData] = useState({});\n    \n\n    useEffect(()=>{\n        let isMounted = true;\n\n        async function fetchData() {\n            const requestOption = {\n                method: \"GET\",\n                redirect: \"follow\",\n                mode: 'cors'\n            }\n    \n            try {\n                const response = await fetch(`https://disease.sh/v2/historical/all`, requestOption)\n    \n                return response.ok ? response.json() : null\n            } catch (err){\n                console.log(err);\n                return null;\n            }\n        }\n    \n        async function prepareData(){\n            let apiValues = await fetchData();\n            let rawCasesData = apiValues[\"cases\"];\n            let rawDeathsData = apiValues[\"deaths\"];\n            let rawRecoveredData = apiValues[\"recovered\"];\n            \n            const chartCasesData = []\n            const chartDeathsData = []\n            const chartRecoveredData = []\n\n\n            for (let key in rawCasesData){\n                \n                if(rawCasesData.hasOwnProperty(key)){\n                    const newRow = {\n                        name: key,\n                        value: parseInt(rawCasesData[key])\n                    }\n                    chartCasesData.push(newRow)\n                    }\n                }\n            setCasesData(chartCasesData)\n\n            for (let key in rawDeathsData){\n                \n                if(rawDeathsData.hasOwnProperty(key)){\n                    const newRow = {\n                        name: key,\n                        value: parseInt(rawDeathsData[key])\n                    }\n                    chartDeathsData.push(newRow)\n                    }\n                }\n            setDeathsData(chartDeathsData)\n\n            for (let key in rawRecoveredData){\n                \n                if(rawRecoveredData.hasOwnProperty(key)){\n                    const newRow = {\n                        name: key,\n                        value: parseInt(rawRecoveredData[key])\n                    }\n                    chartRecoveredData.push(newRow)\n                    }\n                }\n            setRecoveredData(chartRecoveredData)\n\n            setData({\n                cases: chartCasesData,\n                deaths: chartDeathsData,\n                recovered: chartRecoveredData\n            })\n        }\n        if(isMounted){\n            prepareData();\n        }\n        return () => isMounted = false\n\n    }, [])\n\n    retr\n    \n\n    /*if(props.activeView === \"cases\"){\n        return (\n            <div id=\"homeChart\" className=\"chart-wrapper\">\n            <div id=\"chartTitle\"><h4><strong>last 30 days evolution worldwide</strong></h4></div>\n                <AreaChart width={970} height={450} data={casesData}\n                margin={{ top: 0, right: 10, left: 30, bottom: 70 }}>\n                <defs>\n                    <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#FFA500\" stopOpacity={0.8}/>\n                        <stop offset=\"95%\" stopColor=\"#FFA500\" stopOpacity={0}/>\n                    </linearGradient>\n                \n                </defs>\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <Tooltip />\n                <Area type=\"monotone\" dataKey=\"value\" stroke=\"#FFA500\" fillOpacity={1} fill=\"url(#colorUv)\" />\n                </AreaChart>\n            </div>\n        )\n\n    }\n\n    if(props.activeView ===\"recovered\"){\n        return (\n            <div id=\"homeChart\" className=\"chart-wrapper\">\n            <div id=\"chartTitle\"><h4><strong>last 30 days evolution worldwide</strong></h4></div>\n                <AreaChart width={970} height={450} data={recoveredData}\n                margin={{ top: 0, right: 10, left: 30, bottom: 70 }}>\n                <defs>\n                    <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#008000\" stopOpacity={0.8}/>\n                        <stop offset=\"95%\" stopColor=\"#008000\" stopOpacity={0}/>\n                    </linearGradient>\n                \n                </defs>\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <Tooltip />\n                <Area type=\"monotone\" dataKey=\"value\" stroke=\"#008000\" fillOpacity={1} fill=\"url(#colorUv)\" />\n                </AreaChart>\n            </div>\n        )\n\n    }\n    \n    return (\n        <div id=\"homeChart\" className=\"chart-wrapper\">\n        <div id=\"chartTitle\"><h4><strong>last 30 days evolution worldwide</strong></h4></div>\n            <AreaChart width={970} height={450} data={deathsData}\n            margin={{ top: 0, right: 10, left: 30, bottom: 70 }}>\n            <defs>\n                <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor=\"#FF0000\" stopOpacity={0.8}/>\n                    <stop offset=\"95%\" stopColor=\"#FF0000\" stopOpacity={0}/>\n                </linearGradient>\n            \n            </defs>\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <Tooltip />\n            <Area type=\"monotone\" dataKey=\"value\" stroke=\"#FF0000\" fillOpacity={1} fill=\"url(#colorUv)\" />\n            </AreaChart>\n        </div>\n    )*/\n        \n}\n\n"]},"metadata":{},"sourceType":"module"}